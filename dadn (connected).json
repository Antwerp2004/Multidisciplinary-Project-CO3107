{"mode":"python","xmlText":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><block type=\"yolobit_basic_forever\" id=\"w5Bl*-!,Ihc8X2tI)wP*\" x=\"112\" y=\"-238\"><statement name=\"ONSTART\"><block type=\"yolobit_basic_show_image\" id=\"SB?h?1pAl=av62+T2j(#\"><value name=\"image\"><block type=\"yolobit_basic_image_builtins\" id=\"4#C+8{:K:v13E^oV[4kp\"><field name=\"image\">HEART</field></block></value></block></statement><statement name=\"FOREVER\"><block type=\"controls_if\" id=\"W7#G4~ps;+9nrbZ%9hlq\"><mutation else=\"1\"></mutation><value name=\"IF0\"><block type=\"logic_compare\" id=\"W0C$+^f;s1fuP4a+n2LV\"><field name=\"OP\">LTE</field><value name=\"A\"><block type=\"aiot_light_sensor\" id=\"V3#h@TS91x|6+y#1i}?:\"><field name=\"NAME\">pin0</field></block></value><value name=\"B\"><block type=\"math_number\" id=\"~x=eV(a[cGPr/;lIH/st\"><field name=\"NUM\">30</field></block></value></block></value><statement name=\"DO0\"><block type=\"aiot_led_tiny_set_all\" id=\"I6%h)c,QyOFzLXy]}[+@\"><field name=\"port\">pin3</field><field name=\"option\">0</field><value name=\"COLOR\"><shadow type=\"colour_picker\" id=\"gnM)+/qA2;P6r-jpEL)i\"><field name=\"COLOUR\">#ffffff</field></shadow></value></block></statement><statement name=\"ELSE\"><block type=\"aiot_led_tiny_set_all\" id=\"HI]!nMt:F;oKZ4GzYyep\"><field name=\"port\">pin3</field><field name=\"option\">0</field><value name=\"COLOR\"><shadow type=\"colour_picker\" id=\"PEzE`pq,})8w%M~NYYLk\"><field name=\"COLOUR\">#000000</field></shadow></value></block></statement><next><block type=\"controls_if\" id=\"TbAMl.:jdTzuhCeR=dj{\"><mutation else=\"1\"></mutation><value name=\"IF0\"><block type=\"logic_compare\" id=\"j/H@U)9#L_}q:X3em2!,\"><field name=\"OP\">LTE</field><value name=\"A\"><block type=\"aiot_soil_sensor\" id=\"3?I+r6uLIijz5.$tB$[S\"><field name=\"NAME\">pin1</field></block></value><value name=\"B\"><block type=\"math_number\" id=\"56!l7[$T@DDoEGa;jE:e\"><field name=\"NUM\">30</field></block></value></block></value><statement name=\"DO0\"><block type=\"aiot_dual_usb\" id=\"Eqaeg@/oU-6F3?RgCj*z\"><field name=\"NAME\">pin10</field><value name=\"percent\"><shadow type=\"math_number\" id=\"12^eK*4c:FUt65`[9]1s\"><field name=\"NUM\">70</field></shadow></value></block></statement><statement name=\"ELSE\"><block type=\"aiot_dual_usb\" id=\"7N{KHe(G{`Ie-}OFdcaF\"><field name=\"NAME\">pin10</field><value name=\"percent\"><shadow type=\"math_number\" id=\"EmgZt+{a;{,x*cKS$pcn\"><field name=\"NUM\">0</field></shadow></value></block></statement><next><block type=\"aiot_dht_measure\" id=\"fPgujd^hu)t=A5!a)sHG\"><next><block type=\"controls_if\" id=\"m#L@c|;|%`3(i:e,*+d!\"><mutation else=\"1\"></mutation><value name=\"IF0\"><block type=\"logic_compare\" id=\"ZI#:3IE2z7H`rYU+TSt?\"><field name=\"OP\">GTE</field><value name=\"A\"><block type=\"aiot_dht_read\" id=\"uPdvFj8%w^d(d%*IUn#$\"><field name=\"DATA\">TEMP</field></block></value><value name=\"B\"><block type=\"math_number\" id=\"_O@f5M0Q`(rTg)o8by={\"><field name=\"NUM\">1</field></block></value></block></value><statement name=\"DO0\"><block type=\"aiot_minifan\" id=\"KGDEY-^)mwv^j/DqO)tJ\"><field name=\"NAME\">pin14</field><value name=\"percent\"><shadow type=\"math_number\" id=\"FE=|X3aW[s[yIa-X~.3E\"><field name=\"NUM\">70</field></shadow></value></block></statement><statement name=\"ELSE\"><block type=\"aiot_minifan\" id=\"Bl~PCSWQ?p8)^XXYL]LF\"><field name=\"NAME\">pin14</field><value name=\"percent\"><shadow type=\"math_number\" id=\"]kgJ)Z2+bv%R!`KjSbEO\"><field name=\"NUM\">0</field></shadow></value></block></statement><next><block type=\"yolobit_basic_sleep\" id=\"tcU6ETKX=:G`Z+w+B5P[\"><value name=\"duration\"><shadow type=\"math_number\" id=\"d0t9QJ{0=Lw.%gNBEg+J\"><field name=\"NUM\">100</field></shadow></value></block></next></block></next></block></next></block></next></block></statement></block></xml>","python":"import network\r\nimport time\r\nimport sys\r\nfrom umqtt.simple import MQTTClient\r\nfrom yolobit import *\r\nfrom aiot_rgbled import RGBLed\r\nfrom aiot_dht20 import DHT20\r\nfrom machine import Pin, SoftI2C\r\n\r\nWIFI_SSID = \"ACLAB\"\r\nWIFI_PASSWORD = \"ACLAB2023\"\r\n\r\nAIO_USERNAME = \"toan_fi\"\r\nAIO_KEY = \"aio_KLuE16UjOOOyQmmjNf8W37ylj7xl\"\r\nAIO_BROKER = \"io.adafruit.com\"\r\nAIO_PORT = 1883\r\n\r\nAIO_FEEDS = {\r\n    \"display-light\": f\"{AIO_USERNAME}/feeds/display-light\",\r\n    \"display-humid\": f\"{AIO_USERNAME}/feeds/display-humid\",\r\n    \"display-temp\": f\"{AIO_USERNAME}/feeds/display-temp\",\r\n    \"control-light\": f\"{AIO_USERNAME}/feeds/control-light\",\r\n    \"control-humid\": f\"{AIO_USERNAME}/feeds/control-humid\",\r\n    \"control-temp\": f\"{AIO_USERNAME}/feeds/control-temp\",\r\n}\r\n\r\nrgb_led = RGBLed(pin3.pin, 4)\r\ndht_sensor = DHT20()\r\n\r\n\r\n\r\n\r\n\r\ndef connect_wifi():\r\n    wifi = network.WLAN(network.STA_IF)\r\n    wifi.active(True)\r\n    if not wifi.isconnected():\r\n        wifi.connect(WIFI_SSID, WIFI_PASSWORD)\r\n        for _ in range(30):\r\n            if wifi.isconnected():\r\n                return True\r\n            time.sleep(1)\r\n        return False\r\n    return True\r\n\r\ndef on_message(topic, msg):\r\n    feed_id = topic.decode().split(\"/\")[-1]\r\n    payload = msg.decode().strip().lower()\r\n    \r\n    if feed_id == \"control-light\":\r\n        rgb_led.show(0, hex_to_rgb('#ffffff') if payload == \"on\" else hex_to_rgb('#000000'))\r\n    elif feed_id == \"control-humid\":\r\n        value = int(payload)\r\n        pin10.write_analog(round(translate(value, 0, 100, 0, 1023)))\r\n    elif feed_id == \"control-temp\":\r\n        value = int(payload)\r\n        pin14.write_analog(round(translate(value, 0, 100, 0, 1023)))\r\n\r\ndef connect_mqtt():\r\n    client = MQTTClient(AIO_USERNAME, AIO_BROKER, AIO_PORT, AIO_USERNAME, AIO_KEY)\r\n    client.set_callback(on_message)\r\n    try:\r\n        client.connect()\r\n        for feed in AIO_FEEDS.values():\r\n            client.subscribe(feed.encode())\r\n        return client\r\n    except Exception as e:\r\n        sys.exit(1)\r\n\r\nif not connect_wifi():\r\n    sys.exit(1)\r\n\r\nmqtt_client = connect_mqtt()\r\n\r\nlast_publish_time = time.time()\r\n\r\n\r\n\r\n\r\n\r\nwhile True:\r\n    try:\r\n        mqtt_client.check_msg()\r\n        \r\n        if not network.WLAN(network.STA_IF).isconnected():\r\n            connect_wifi()\r\n\r\n        if time.time() - last_publish_time >= 30:\r\n            dht_sensor.read_dht20()\r\n            light_level = round(translate(pin0.read_analog(), 0, 4095, 0, 1000))\r\n            humidity_level = round(translate(pin1.read_analog(), 0, 4095, 0, 100))\r\n            temperature = dht_sensor.dht20_temperature()\r\n\r\n            mqtt_client.publish(AIO_FEEDS[\"display-light\"], str(light_level))\r\n            mqtt_client.publish(AIO_FEEDS[\"display-humid\"], str(humidity_level))\r\n            mqtt_client.publish(AIO_FEEDS[\"display-temp\"], str(temperature))\r\n            \r\n            last_publish_time = time.time()\r\n    \r\n    except Exception as e:\r\n        print(\"⚠️ Error:\", e)\r\n        time.sleep(5)\r\n","name":"dadn","extensions":[{"id":"yolobit-AITT-VN-yolobit_extension_aiot","src":"https://github.com/AITT-VN/yolobit_extension_aiot","name":"AIOT Kit","description":"Mục mở rộng dành cho bộ kit AIoT"}],"device":"yolobit"}